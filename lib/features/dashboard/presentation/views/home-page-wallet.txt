import 'package:flutter/material.dart';
import 'package:fl_chart/fl_chart.dart';

class TransactionChart extends StatelessWidget {
  final List<Transaction> transactions;

  TransactionChart({required this.transactions});

  @override
  Widget build(BuildContext context) {
    // Calculate the range of amounts spent
    double minAmount = transactions.map((t) => t.amount).reduce((a, b) => a < b ? a : b);
    double maxAmount = transactions.map((t) => t.amount).reduce((a, b) => a > b ? a : b);

    // Determine the number of weeks and the amount of money spent each week
    int numberOfWeeks = (DateTime.now().day / 7).ceil();
    List<double> weeklySpending = List.generate(numberOfWeeks, (index) {
      double startOfWeek = (index * 7) + 1;
      double endOfWeek = (index + 1) * 7;
      return transactions
          .where((t) => t.date.day >= startOfWeek && t.date.day <= endOfWeek)
          .map((t) => t.amount)
          .fold(0, (sum, amount) => sum + amount);
    });

    return LineChart(
      LineChartData(
        minX: 0,
        maxX: numberOfWeeks.toDouble(),
        minY: minAmount,
        maxY: maxAmount,
        titlesData: FlTitlesData(
          bottomTitles: SideTitles(
            showTitles: true,
            reservedSize: 22,
            getTextStyles: (value) => const TextStyle(
              color: Color(0xff68737d),
              fontWeight: FontWeight.bold,
              fontSize: 16,
            ),
            getTitles: (value) {
              int weekNumber = value.toInt() + 1;
              return 'Week $weekNumber';
            },
          ),
          leftTitles: SideTitles(
            showTitles: true,
            getTextStyles: (value) => const TextStyle(
              color: Color(0xff68737d),
              fontWeight: FontWeight.bold,
              fontSize: 14,
            ),
          ),
        ),
        borderData: FlBorderData(
          show: true,
          border: Border.all(color: const Color(0xff37434d), width: 1),
        ),
        lineBarsData: [
          LineChartBarData(
            spots: List.generate(numberOfWeeks, (index) => FlSpot(index.toDouble(), weeklySpending[index])),
            isCurved: true,
            colors: [Colors.blue],
            barWidth: 4,
            isStrokeCapRound: true,
            dotData: FlDotData(show: false),
          ),
        ],
      ),
    );
  }
}

class Transaction {
  final DateTime date;
  final double amount;

  Transaction({required this.date, required this.amount});
}

// Example usage:
// List<Transaction> transactions = [
//   Transaction(date: DateTime(2024, 4, 1), amount: 5000),
//   Transaction(date: DateTime(2024, 4, 5), amount: 3000),
//   Transaction(date: DateTime(2024, 4, 12), amount: 8000),
//   Transaction(date: DateTime(2024, 4, 20), amount: 6000),
//   Transaction(date: DateTime(2024, 4, 25), amount: 4000),
// ];

// TransactionChart(transactions: transactions)
